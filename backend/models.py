from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
from enum import Enum
import uuid

# Enum –¥–ª—è —Ñ–∞–∑ –∏–≥—Ä—ã
class GamePhase(str, Enum):
    LOBBY = "lobby"
    SETUP = "setup"  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∞—Ç–∞–∫–∏/–∑–∞—â–∏—Ç—ã
    ACTION = "action"  # –§–∞–∑–∞ 1: –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    SPYING = "spying"  # –§–∞–∑–∞ 2: —à–ø–∏–æ–Ω–∞–∂
    BATTLE = "battle"  # –§–∞–∑–∞ 3: —Ä–∞—Å—á–µ—Ç –∞—Ç–∞–∫
    NEGOTIATION = "negotiation"  # –§–∞–∑–∞ 4: –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
    ALLIANCE = "alliance"  # –§–∞–∑–∞ 5: –∞–ª—å—è–Ω—Å—ã
    SUMMIT = "summit"  # –§–∞–∑–∞ 6: –æ–±—â–∏–π —Å–∞–º–º–∏—Ç
    SPY_REPORTS = "spy_reports"  # –§–∞–∑–∞ 7: –æ—Ç—á–µ—Ç—ã —à–ø–∏–æ–Ω–æ–≤
    FINISHED = "finished"

# Enum –¥–ª—è —è–∑—ã–∫–æ–≤
class Language(str, Enum):
    RU = "ru"
    EN = "en"

# Enum –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
class PlayerStatus(str, Enum):
    ACTIVE = "active"
    OBSERVER = "observer"
    DISCONNECTED = "disconnected"

# –ú–æ–¥–µ–ª—å –∏–≥—Ä—ã/–∫–æ–º–Ω–∞—Ç—ã
class Game(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    host_id: str
    password: Optional[str] = None
    language: Language = Language.RU
    max_players: int = 8
    current_phase: GamePhase = GamePhase.LOBBY
    phase_end_time: Optional[datetime] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)
    started_at: Optional[datetime] = None
    finished_at: Optional[datetime] = None
    is_started: bool = False

# –ú–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞
class Player(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    game_id: str
    name: str
    socket_id: Optional[str] = None
    country: Optional[str] = None
    country_flag: Optional[str] = None
    attack_troops: int = 0
    defense_troops: int = 0
    status: PlayerStatus = PlayerStatus.ACTIVE
    is_ready: bool = False
    is_host: bool = False
    joined_at: datetime = Field(default_factory=datetime.utcnow)
    last_activity: datetime = Field(default_factory=datetime.utcnow)
    ping: Optional[int] = None

# –ú–æ–¥–µ–ª—å –∞–ª—å—è–Ω—Å–∞
class Alliance(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    game_id: str
    player1_id: str
    player2_id: str
    is_active: bool = True
    created_at: datetime = Field(default_factory=datetime.utcnow)

# –ú–æ–¥–µ–ª—å —à–ø–∏–æ–Ω–∞
class Spy(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    game_id: str
    owner_id: str
    target_id: str
    info_type: str  # "attack", "defense", "partners"
    is_delivered: bool = False
    created_at: datetime = Field(default_factory=datetime.utcnow)

# –ú–æ–¥–µ–ª—å –±–æ–µ–≤–æ–≥–æ –ª–æ–≥–∞
class BattleLog(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    game_id: str
    round_number: int
    defender_id: str
    attackers: List[Dict[str, Any]]  # [{"player_id": str, "sent": int, "lost": int, "survived": int}]
    effective_defense: int
    created_at: datetime = Field(default_factory=datetime.utcnow)

# –ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
class ChatMessage(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    game_id: str
    player_id: str
    player_name: str
    message: str
    message_type: str = "public"  # "public", "private", "system"
    target_player_id: Optional[str] = None  # –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    created_at: datetime = Field(default_factory=datetime.utcnow)

# –ú–æ–¥–µ–ª–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
class CreateGameRequest(BaseModel):
    name: str
    host_name: str
    password: Optional[str] = None
    language: Language = Language.RU
    max_players: int = Field(default=8, ge=4, le=10)

class JoinGameRequest(BaseModel):
    game_id: str
    player_name: str
    password: Optional[str] = None

class SendMessageRequest(BaseModel):
    message: str
    target_player_id: Optional[str] = None

class KickPlayerRequest(BaseModel):
    player_id: str

class UpdateGameSettingsRequest(BaseModel):
    name: Optional[str] = None
    password: Optional[str] = None
    language: Optional[Language] = None
    max_players: Optional[int] = Field(None, ge=4, le=10)

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
class GameResponse(BaseModel):
    id: str
    name: str
    host_name: str
    has_password: bool
    language: Language
    max_players: int
    current_players: int
    current_phase: GamePhase
    is_started: bool
    created_at: datetime

class PlayerResponse(BaseModel):
    id: str
    name: str
    country: Optional[str] = None
    country_flag: Optional[str] = None
    attack_troops: int
    defense_troops: int
    status: PlayerStatus
    is_ready: bool
    is_host: bool
    ping: Optional[int] = None

class GameDetailResponse(BaseModel):
    game: GameResponse
    players: List[PlayerResponse]
    is_host: bool
    current_player_id: str

# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å —Ñ–ª–∞–≥–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞)
COUNTRIES = [
    {"name": "–†–æ—Å—Å–∏—è", "flag": "üá∑üá∫", "code": "RU"},
    {"name": "–°–®–ê", "flag": "üá∫üá∏", "code": "US"},
    {"name": "–ö–∏—Ç–∞–π", "flag": "üá®üá≥", "code": "CN"},
    {"name": "–ì–µ—Ä–º–∞–Ω–∏—è", "flag": "üá©üá™", "code": "DE"},
    {"name": "–§—Ä–∞–Ω—Ü–∏—è", "flag": "üá´üá∑", "code": "FR"},
    {"name": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "flag": "üá¨üáß", "code": "GB"},
    {"name": "–Ø–ø–æ–Ω–∏—è", "flag": "üáØüáµ", "code": "JP"},
    {"name": "–ò—Ç–∞–ª–∏—è", "flag": "üáÆüáπ", "code": "IT"},
    {"name": "–ò—Å–ø–∞–Ω–∏—è", "flag": "üá™üá∏", "code": "ES"},
    {"name": "–ö–∞–Ω–∞–¥–∞", "flag": "üá®üá¶", "code": "CA"},
]